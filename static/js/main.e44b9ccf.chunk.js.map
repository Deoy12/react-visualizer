{"version":3,"sources":["index.js"],"names":["Table","state","counter","numHeads","numTails","data","Array","flipCoin","headProbability","document","getElementById","value","setState","Math","random","proportion","onClick","type","class","this","for","id","selected","style","display","flexWrap","parent","maxWidth","x","y","axis","stroke","ticks","tickLabels","fill","React","Component","ReactDOM","render"],"mappings":"gSAKMA,E,4MACJC,MAAQ,CAACC,QAAS,EAAGC,SAAS,EAAGC,SAAS,EAAGC,KAAK,IAAIC,O,EACtDC,SAAS,WACP,IAAMC,EAAkBC,SAASC,eAAe,mBAAmBC,MACnE,EAAKC,SAAS,CAACV,QAAQ,EAAKD,MAAMC,QAAU,IAC/BW,KAAKC,UACJN,EACZ,EAAKI,SAAS,CAACT,SAAS,EAAKF,MAAME,SAAW,IAE9C,EAAKS,SAAS,CAACR,SAAS,EAAKH,MAAMG,SAAW,IAEhD,IAAIW,EAAa,EAAKd,MAAME,SAAS,EAAKF,MAAMC,QAChD,EAAKD,MAAMI,KAAK,EAAKJ,MAAMC,QAAU,GAAK,CAAC,EAAKD,MAAMC,QAASa,I,uDAIvD,IAAD,OACP,OAAO,6BACD,2BACA,4BAAQC,QAAS,kBAAM,EAAKT,YAAYU,KAAK,SAASC,MAAM,sCAA5D,cAIA,2BACE,uDAA4B,2BAAIC,KAAKlB,MAAMC,QAAf,KAA5B,KACA,iDAAsB,2BAAIiB,KAAKlB,MAAME,UAArC,KACA,iDAAsB,2BAAIgB,KAAKlB,MAAMG,UAArC,MAGF,8BACA,yBAAKc,MAAM,cACT,2BAAOE,IAAI,6BAA4B,gDACvC,4BAAQC,GAAK,kBAAkBH,MAAM,gBAEnC,4BAAQI,SAAW,YAAnB,OACA,uCACA,uCACA,uCACA,0CAQJ,yBAAKC,MAAO,CAAEC,QAAS,OAAQC,SAAU,SACzC,kBAAC,IAAD,CAAcF,MAAO,CAAEG,OAAQ,CAAEC,SAAU,SAC/B,kBAAC,IAAD,CACAtB,KAAMc,KAAKlB,MAAMI,KACjBuB,EAAK,EACLC,EAAK,KAIX,kBAAC,IAAD,CAAcN,MAAO,CAAEG,OAAQ,CAAEC,SAAU,SAC3C,kBAAC,IAAD,CAAaJ,MAAO,CACVO,KAAM,CAACC,OAAQ,eACfC,MAAO,CAACD,OAAQ,eAChBE,WAAY,CAAEC,KAAK,kBAE7B,kBAAC,IAAD,CACE7B,KAAM,CACJ,CAAEuB,EAAG,QAASC,EAAGV,KAAKlB,MAAME,SAASgB,KAAKlB,MAAMC,SAChD,CAAE0B,EAAG,QAASC,EAAG,EAAIV,KAAKlB,MAAME,SAASgB,KAAKlB,MAAMC,mB,GAhEpDiC,IAAMC,WAwE1BC,IAASC,OAAO,kBAACtC,EAAD,MAAiBS,SAASC,eAAe,U","file":"static/js/main.e44b9ccf.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { VictoryChart, VictoryLine, VictoryPie, VictoryTheme, VictoryAxis } from 'victory';\n\nclass Table extends React.Component {\n  state = {counter: 0, numHeads:0, numTails:0, data:new Array()};\n  flipCoin=()=>{\n    const headProbability = document.getElementById(\"headProbability\").value;\n    this.setState({counter:this.state.counter + 1});\n    let result = Math.random()\n    if (result <= headProbability) {\n      this.setState({numHeads:this.state.numHeads + 1});\n    } else {\n      this.setState({numTails:this.state.numTails + 1});\n    }\n    let proportion = this.state.numHeads/this.state.counter\n    this.state.data[this.state.counter - 1] = [this.state.counter, proportion]\n  }\n\n\n  render() { \n    return <div>\n          <p>\n          <button onClick={() => this.flipCoin()} type=\"button\" class=\"btn btn-secondary btn-lg btn-block\">Flip Coin</button>\n          </p>\n        \n       \n          <p>\n            <div>Coin has been flipped: <b>{this.state.counter} </b> </div>\n            <div>Number of Heads: <b>{this.state.numHeads}</b> </div>\n            <div>Number of Tails: <b>{this.state.numTails}</b> </div>\n\n          </p>   \n          <form>\n          <div class=\"form-group\">\n            <label for=\"exampleFormControlSelect1\"><b>Head Probability</b></label>\n            <select id = \"headProbability\" class=\"form-control\">\n              \n              <option selected = \"selected\">0.5</option>\n              <option>0.4</option>\n              <option>0.3</option>\n              <option>0.2</option>\n              <option>0.1</option>\n\n\n            </select>\n         </div>\n\n          </form>\n        \n          <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n          <VictoryChart style={{ parent: { maxWidth: \"50%\" } }}>\n                      <VictoryLine \n                      data={this.state.data}\n                      x = {0}\n                      y = {1}\n                  />\n                   \n                </VictoryChart>\n                <VictoryChart style={{ parent: { maxWidth: \"50%\" } }}>\n                <VictoryAxis style={{ \n                          axis: {stroke: \"transparent\"}, \n                          ticks: {stroke: \"transparent\"},\n                          tickLabels: { fill:\"transparent\"} \n                      }} />\n                <VictoryPie\n                  data={[\n                    { x: \"Heads\", y: this.state.numHeads/this.state.counter},\n                    { x: \"Tails\", y: 1 - this.state.numHeads/this.state.counter},\n                  ]}/> \n                </VictoryChart>\n         </div>         \n         </div>\n   \n  }\n}\nReactDOM.render(<Table></Table>, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}