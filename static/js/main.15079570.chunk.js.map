{"version":3,"sources":["index.js"],"names":["Table","state","counter","numHeads","numTails","data","x","y","flipCoin","headProbability","document","getElementById","value","setState","Math","random","proportion","push","console","log","class","for","id","selected","onClick","type","style","display","flexWrap","parent","maxWidth","this","label","dependentAxis","domain","axisLabel","padding","tickLabels","axis","stroke","ticks","fill","React","Component","ReactDOM","render"],"mappings":"+RAKMA,E,4MACJC,MAAQ,CAACC,QAAS,EAAGC,SAAU,EAAGC,SAAS,EAAGC,KAAK,CAAC,CAACC,EAAG,EAAGC,EAAG,GAAI,CAACD,EAAE,EAAGC,EAAE,M,EAC1EC,SAAS,WACP,IAAMC,EAAkBC,SAASC,eAAe,mBAAmBC,MAQnE,GAPA,EAAKC,SAAS,CAACX,QAAQ,EAAKD,MAAMC,QAAU,IAC/BY,KAAKC,UACJN,EACZ,EAAKI,SAAS,CAACV,SAAS,EAAKF,MAAME,SAAW,IAE9C,EAAKU,SAAS,CAACT,SAAS,EAAKH,MAAMG,SAAW,IAEtB,GAAtB,EAAKH,MAAMC,QAAc,CAC3B,IAAIc,EAAa,EAAKf,MAAME,SAAS,EAAKF,MAAMC,QAChD,EAAKD,MAAMI,KAAKY,KAAK,CAACX,EAAG,EAAKL,MAAMC,QAASK,EAAGS,IAChDE,QAAQC,IAAI,EAAKlB,MAAMI,Q,uDAKjB,IAAD,OACP,OAAO,6BAID,8BAEA,yBAAKe,MAAM,cACT,2BAAOC,IAAI,6BAA4B,gDACvC,4BAAQC,GAAK,kBAAkBF,MAAM,gBAEnC,4BAAQG,SAAW,YAAnB,OACA,uCACA,uCACA,uCACA,0CAQJ,yBAAKH,MAAM,eACZ,4BAAQI,QAAS,kBAAM,EAAKhB,YAAYiB,KAAK,SAAUL,MAAM,4BAA7D,cAEC,yBAAKM,MAAO,CAAEC,QAAS,OAAQC,SAAU,SACzC,kBAAC,IAAD,CAAcF,MAAO,CAAEG,OAAQ,CAAEC,SAAU,SAC/B,kBAAC,IAAD,CACAzB,KAAM0B,KAAK9B,MAAMI,OAGrB,kBAAC,IAAD,CAAa2B,MAAM,yBACnB,kBAAC,IAAD,CACEC,eAAa,EACbD,MAAM,kBACNE,OAAQ,CAAC,EAAG,GACZR,MAAO,CACLS,UAAW,CAAEC,QAAS,IACtBC,WAAY,CAAED,QAAS,OAI7B,kBAAC,IAAD,CAAcV,MAAO,CAAEG,OAAQ,CAAEC,SAAU,SAC3C,kBAAC,IAAD,CAAaJ,MAAO,CACVY,KAAM,CAACC,OAAQ,eACfC,MAAO,CAACD,OAAQ,eAChBF,WAAY,CAAEI,KAAK,kBAE7B,kBAAC,IAAD,CACEpC,KAAM,CAEJ,CAAEC,EAAG,QAASC,EAA2B,GAAtBwB,KAAK9B,MAAMC,QAAgB,GAAM6B,KAAK9B,MAAME,SAAS4B,KAAK9B,MAAMC,SACnF,CAAEI,EAAG,QAASC,EAAyB,GAAtBwB,KAAK9B,MAAMC,QAAgB,GAAM,EAAI6B,KAAK9B,MAAME,SAAS4B,KAAK9B,MAAMC,mB,GAxErFwC,IAAMC,WAiF1BC,IAASC,OAAO,kBAAC7C,EAAD,MAAiBU,SAASC,eAAe,U","file":"static/js/main.15079570.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { VictoryChart, VictoryLine, VictoryPie, VictoryAxis } from 'victory';\n\nclass Table extends React.Component {\n  state = {counter: 0, numHeads: 0, numTails:0, data:[{x: 0, y: 0}, {x:1, y:0.5}]};\n  flipCoin=()=>{\n    const headProbability = document.getElementById(\"headProbability\").value;\n    this.setState({counter:this.state.counter + 1});\n    let result = Math.random()\n    if (result <= headProbability) {\n      this.setState({numHeads:this.state.numHeads + 1});\n    } else {\n      this.setState({numTails:this.state.numTails + 1});\n    }\n    if (this.state.counter != 0) {\n      let proportion = this.state.numHeads/this.state.counter;\n      this.state.data.push({x: this.state.counter, y: proportion})\n      console.log(this.state.data)\n    }\n  }\n\n\n  render() { \n    return <div>\n        \n       \n          \n          <form>\n            \n          <div class=\"form-group\">\n            <label for=\"exampleFormControlSelect1\"><b>Head Probability</b></label>\n            <select id = \"headProbability\" class=\"form-control\">\n              \n              <option selected = \"selected\">0.5</option>\n              <option>0.4</option>\n              <option>0.3</option>\n              <option>0.2</option>\n              <option>0.1</option>\n\n\n            </select>\n         </div>\n\n        \n          </form>\n          <div class=\"text-center\">\n         <button onClick={() => this.flipCoin()} type=\"button\"  class=\"btn btn-secondary btn-lg\">Flip Coin</button>\n          </div>\n          <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n          <VictoryChart style={{ parent: { maxWidth: \"50%\" } }}>\n                      <VictoryLine \n                      data={this.state.data}\n\n                  />\n                  <VictoryAxis label=\"Number of Coin Flips\" />\n                  <VictoryAxis\n                    dependentAxis\n                    label=\"Head Percentage\"\n                    domain={[0, 1]}\n                    style={{\n                      axisLabel: { padding: 35},\n                      tickLabels: { padding: 5 }\n                    }}\n                  />\n                </VictoryChart>\n                <VictoryChart style={{ parent: { maxWidth: \"50%\" } }}>\n                <VictoryAxis style={{ \n                          axis: {stroke: \"transparent\"}, \n                          ticks: {stroke: \"transparent\"},\n                          tickLabels: { fill:\"transparent\"} \n                      }} />\n                <VictoryPie\n                  data={[\n                   \n                    { x: \"Heads\", y:  (this.state.counter == 0) ? 0.5 : this.state.numHeads/this.state.counter},\n                    { x: \"Tails\", y:(this.state.counter == 0) ? 0.5 : 1 - this.state.numHeads/this.state.counter},\n                  ]}/> \n                </VictoryChart>\n         </div>       \n\n         </div>\n   \n  }\n}\nReactDOM.render(<Table></Table>, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}